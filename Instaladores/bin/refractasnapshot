#!/usr/bin/env bash
version="refractasnapshot-9.2.2 (20160205)"
# Copyright: fsmithred@gmail.com 2011-2016
# based on refractasnapshot-8.0.4 by Dean Linkous with ideas
# borrowed from dzsnapshot-gui.sh by David Hare, which was based on an
# earlier version of this script.

# License: GPL-3
# This is free software with NO WARRANTY. Use at your own risk!

# DESCRIPTION
# This script makes a copy of your system with rsync and then creates
# an iso file to be used as a live-cd. There are options in the config
# file to change the location of the copy and the location of the final
# iso file, in case there's not enough room on the system drive. Read
# the config file for more options. (refractasnapshot.conf)



# If you want to change any defaults, change them in the configfile.
# Default is /etc/refractasnapshot.conf
# If you want to use a different config file for testing,
# either change this variable here or use the -c, --config option on
# the command-line. (Command-line option will supercede this setting.) 
# Normally, users should not edit anything in this script.
configfile="/etc/refractasnapshot.conf"

show_help () {
	printf "$help_text"
	exit 0
}

help_text="
	Usage:  $0  [option]
	
	Run with no options to create .iso file for a live, bootable CD
	or DVD copy of the running system.
	
	valid options:
		-h, --help		show this help text
		-v, --version	display the version information
		-n, --nocopy	don't re-copy saved filesystem copy (skip rsync)
		-d. --debug		debug mode
		-c, --config	specify a different config file
						(file name must be next argument)

	example:
		refractasnapshot -n -c myconfigs

	*** See $configfile for information about settings.

"

while [[ $1 == -* ]]; do
	case "$1" in
	
		-h|--help)
			show_help ;;
		
		-v|--version)
			printf "\n$version\n\n"
			exit 0 ;;
		
		-c|--config)
			shift
			configfile="$1"
			printf "\n config file is $configfile\n"
			shift
			;;
		
		-n|--nocopy)
			nocopy="yes"
			printf "\n Skipping rsync. Old filesystem copy will be used.\n"
			shift
			;;
			
		-d|--debug)
			DEBUG="yes"
			shift ;;
				
		*) 
			printf "\t invalid option: $1 \n\n"
			printf "\t Try:  $0 -h for full help. \n\n"
			exit 1 ;;
    esac
done		


##### This can be removed from the final version
if ! [[ -d /usr/lib/refractasnapshot/iso/live ]]; then
	mkdir -p /usr/lib/refractasnapshot/iso/live
fi


refractasnapshot_configuration () {
if [[ -f $configfile ]]; then
    source $configfile
fi
# Check for values in $configfile and use them.
# If any are unset, these defaults will be used.
error_log=${error_log:="/var/log/refractasnapshot_errors.log"}
work_dir=${work_dir:="/home/work"}
snapshot_dir=${snapshot_dir:="/home/snapshot"}
save_work=${save_work:="no"}
snapshot_excludes=${snapshot_excludes:="/usr/lib/refractasnapshot/snapshot_exclude.list"}
kernel_image=${kernel_image:="/vmlinuz"}
initrd_image=${initrd_image:="/initrd.img"}
stamp=${stamp:="datetime"}
snapshot_basename=${snapshot_basename:="snapshot"}
make_md5sum=${make_md5sum:="no"}
make_isohybrid=${make_isohybrid:="yes"}
edit_boot_menu=${edit_boot_menu:="no"}
iso_dir=${iso_dir:="/usr/lib/refractasnapshot/iso"}
boot_menu=${boot_menu:="live.cfg"}
text_editor=${text_editor:="/usr/bin/nano"}
pmount_fixed=${pmount_fixed:="yes"}
update_mlocate=${update_mlocate:="yes"}
patch_init_nosystemd=${patch_init_nosystemd:="yes"}
}

refractasnapshot_configuration


# Check that user is root.
[[ $(id -u) -eq 0 ]] || { echo -e "\n\t You need to be root!\n" ; exit 1 ; }


# Record errors in a logfile.
exec 2>"$error_log"

if [[ $DEBUG = "yes" ]] ; then
	set -x
fi


patch_init () {

#  Check for commented previous patch.
if $(grep -q ^#.*nuke "$target_file") ; then
	echo "It looks like $target_file 
was previously patched, and you commented out the edits.
You must edit the file to uncomment the following lines 
and then run 'update-initramfs -u'

	mount -n -o move /sys ${rootmnt}/sys
	#nuke /sys
	#ln -s ${rootmnt}/sys /sys
	mount -n -o move /proc ${rootmnt}/proc
	#nuke /proc
	#ln -s ${rootmnt}/proc /proc"
	exit 0
fi

# If not patched, patch it.	
if ! $(grep -v ^# "$target_file" | grep -q "nuke.*/sys") ; then
	echo "It looks like you need to patch /usr/share/initramfs-tools/init
If you want to continue without patching, you must 
set patch_init_nosystemd to no in the config file.
If you don't patch init, your iso will probably not boot."
	while true ; do
		echo "Run patch? (y/n)"
		read ans
		case $ans in
			[Yy]*)	if [[ -f /usr/bin/patch ]] ; then
						echo "applying patch..." 
						patch -b "$target_file" "$patch_file"
						update-initramfs -u
					else
						echo "You need to install patch."
						exit 0
					fi
					break ;;
			[Nn]*)	echo "Exiting..."
					exit 0 ;;
		esac
	done
fi


}

# Test for systemd, util-linux version and patch intramfs-tools/init.
if [[ $patch_init_nosystemd = "yes" ]] ; then
	utillinux_version=$(dpkg -l util-linux | awk '/util-linux/ { print $3 }' | cut -d. -f2)
	target_file="/usr/share/initramfs-tools/init"
	patch_file="/usr/lib/refractasnapshot/init_for_util-lin.patch"
	
	if [[ ! -h /sbin/init ]] ; then 
		if [[ $utillinux_version -ge 25 ]] ; then
			patch_init
		fi
	fi
fi		


# Get the login name of the primary user; for cleaning geany history
username=$(awk -F":" '/1000:1000/ { print $1 }' /etc/passwd)


# Default text editor is nano. Make sure it exists if user intends to
# edit files before squashing the filesystem.
if [[ $edit_boot_menu = "yes" ]] ; then
	[[ -e $text_editor ]] || { echo -e "\n Error! The text editor is set to ${text_editor},
 but it is not installed. Edit $configfile
 and set the text_editor variable to the editor of your choice.
 (examples: /usr/bin/vim, /usr/bin/joe)\n" ; exit 1 ; }
fi


# Function to check for old snapshots and filesystem copy
check_copies () {
# Check how many snapshots already exist and their total size
if [[ -d $snapshot_dir ]]; then
	if ls "$snapshot_dir"/*.iso > /dev/null ; then
		snapshot_count=$(ls "$snapshot_dir"/*.iso | wc -l)
	else
		snapshot_count="0"
	fi
	snapshot_size=$(du -sh "$snapshot_dir" | awk '{print $1}')
	if [[ -z $snapshot_size ]]; then
		snapshot_size="0 bytes"
	fi
else
	snapshot_count="0"
	snapshot_size="0 bytes"
fi

# Check for saved copy of the system
if [[ -d "$work_dir"/myfs ]]; then
    saved_size=$(du -sh "$work_dir"/myfs | awk '{ print $1 }')
    saved_copy=$(echo "* You have a saved copy of the system using $saved_size of space
   located at $work_dir/myfs.")
fi


# Create a message to say whether the filesystem copy will be saved or not.
if [[ $save_work = "yes" ]]; then
	save_message=$(echo "* The temporary copy of the filesystem will be saved 
   at $work_dir/myfs.")
else
	save_message=$(echo "* The temporary copy of the filesystem will be created 
   at $work_dir/myfs and removed when this program finishes.")
fi
}


# Create snapshot_dir and work_dir if necessary.
check_directories () {


# Don't use /media/* for $snapshot_dir or $work_dir unless it is a mounted filesystem
snapdir_is_remote=$(echo ${snapshot_dir} | awk -F / '{ print "/" $2 "/" $3 }' | grep /media/)
workdir_is_remote=$(echo ${work_dir} | awk -F / '{ print "/" $2 "/" $3 }' | grep /media/)

if [ -n "$snapdir_is_remote" ] && cat /proc/mounts | grep -q ${snapdir_is_remote}; then
   echo "$snapshot_dir is mounted"
elif [ -n "$snapdir_is_remote" ] ; then
   echo " Error.. The selected snapshot directory cannot be accessed. Do you need to mount it?"
   exit 1
fi

if [ -n "$workdir_is_remote" ] && cat /proc/mounts | grep -q ${workdir_is_remote}; then
   echo "$work_dir is mounted"
elif [ -n "$workdir_is_remote" ] ; then
   echo " Error.. The selected work directory cannot be accessed. Do you need to mount it?"
   exit 1
fi


# Check that snapshot_dir exists
if ! [[ -d $snapshot_dir ]]; then
	mkdir -p "$snapshot_dir"
	chmod 777 "$snapshot_dir"
fi


# Check that work directories exist or create them.
if [[ $save_work = "no" ]]; then
    if [[ -d $work_dir ]]; then
        rm -rf "$work_dir"
    fi
    mkdir -p "$work_dir"/iso
    mkdir -p "$work_dir"/myfs
elif [[ $save_work = "yes" ]]; then
	if ! [[ -d $work_dir ]]; then
	    mkdir -p "$work_dir"/iso
        mkdir -p "$work_dir"/myfs
    fi
fi
}

#****************************************************************

# acotación que probablemente decidamos comentar(no presentar)
# debe ser suficiente con comentar las líneas 354 y 355

# Check disk space on mounted /, /home, /media, /mnt, /tmp
check_space () {

disk_space=$(df -h -x tmpfs -x devtmpfs -x iso9660 | awk '{ print "  " $2 "\t" $3 "\t" $4 "\t" $5 "  \t" $6 "\t\t\t" $1 }')
}


# Show current settings and disk space 
report_space () {
echo "
 You will need plenty of free space. It is recommended that free space 
 (Avail) in the partition that holds the work directory (probably \"/\")
 should be two times the total installed system size (Used). You can 
 deduct the space taken up by previous snapshots and any saved copies of
 the system from the Used amount.

 * You have $snapshot_count snapshots taking up $snapshot_size of disk space.
 $saved_copy
 $save_message
 * The snapshot directory is currently set to $snapshot_dir
 $tmp_warning

 You can change these and other settings by editing 
 $configfile.

 Turn off NUM LOCK for some laptops.

 Current disk usage:
 (For complete listing, exit and run 'df -h')

 $disk_space
 
    Press ENTER to proceed or hit ctrl-c to exit.  "
    read -p " "
}

#****************************************************************


# Check that kernel and initrd exist
[[ -e "$kernel_image" ]] || kernel_message=" Warning:   Kernel image is missing. "
[[ -e "$initrd_image" ]] || initrd_message=" Warning:   initrd image is missing. "
if [[ -n "$kernel_message" ]] || [[ -n "$initrd_message" ]] ; then
	echo "
$kernel_message
$initrd_message

 Make sure the kernel_image and/or initrd_image  
 set in the config file are correct, and check 
 that the boot menu is also correct.
"
	exit 1
fi


check_copies
check_directories
#check_space
#report_space


set_distro_name () {
if [[ $iso_dir = "/usr/lib/refractasnapshot/iso" ]] && [[ $boot_menu = "live.cfg" ]] ; then

	DISTRO=$(lsb_release -i -s 2>/dev/null)

	if $(grep -q Refracta /etc/issue) ; then
		DISTRO="Refracta"
	fi

	while true ; do
		echo "
	This is the distribution name that will appear in the boot menu for the
	live image. You can change it to something else, or you can blank this,
	and the the menu entries will just say \"GNU/Linux <kernel-version>\"
	"
#		# Redirect stderr from the error log to the screen,
#		# so we can see the prompts from read.
		exec 2>&1
		read -p "	Enter, erase or change distro name: " -i "$DISTRO" -e answer
#		# Resume logging errors.
		exec 2>>"$error_log"
		break
	done

	if [[ -z "$answer" ]] ; then
		DISTRO="GNU/Linux `uname -r`"
	else
		DISTRO="$answer"
	fi
fi
}

# Comentado para MiniNo
# Commented for MiniNo

#set_distro_name


# Añadido para MiniNo
# Added for MiniNo

DISTRO="MiniNo"


# Prepare initrd to use encryption
# This is only going to work if the latest kernel version is running.
if [[ $initrd_crypt = "yes" ]] ; then
	if ! [[ -f /initrd.img_pre-snapshot ]] ; then
		cp /initrd.img /initrd.img_pre-snapshot
	fi

	if [[ -f /usr/sbin/update-initramfs.orig.initramfs-tools ]] ; then
		CRYPTSETUP=y usr/sbin/update-initramfs.orig.initramfs-tools -u
	else 
		CRYPTSETUP=y usr/sbin/update-initramfs -u
	fi	
fi


# updated the mlocate database 
if [[ $update_mlocate = "yes" ]]; then
	echo -e "\nRunning updatedb...\n"
	updatedb
fi


# The real work starts here
cd "$work_dir"

# @@@@  Warning: This will replace these files in custom iso_dir  @@@@@
#copy some isolinux stuff from the system to the snapshot
copy_isolinux () {

if [[ -f /usr/lib/ISOLINUX/isolinux.bin ]] ; then
	isolinuxbin="/usr/lib/ISOLINUX/isolinux.bin"
elif [[ -f /usr/lib/syslinux/isolinux.bin ]] ; then
	isolinuxbin="/usr/lib/syslinux/isolinux.bin"
else
	echo "You need to install the isolinux package."
	exit 1
fi

### Might need to add chain.c32 to this list of copied files:

if [[ -f /usr/lib/syslinux/modules/bios/vesamenu.c32 ]] ; then
	vesamenu="/usr/lib/syslinux/modules/bios/vesamenu.c32"
	rsync -a /usr/lib/syslinux/modules/bios/ldlinux.c32 "$iso_dir"/isolinux/
	rsync -a /usr/lib/syslinux/modules/bios/libcom32.c32 "$iso_dir"/isolinux/
	rsync -a /usr/lib/syslinux/modules/bios/libutil.c32 "$iso_dir"/isolinux/
else
	vesamenu="/usr/lib/syslinux/vesamenu.c32"
fi
rsync -a "$isolinuxbin" "$iso_dir"/isolinux/
rsync -a "$vesamenu" "$iso_dir"/isolinux/

# Add Refracta-specific boot help files
if [[ $refracta_boot_help = "yes" ]] ; then
	cp -a /usr/lib/refractasnapshot/boot_help/*  "$iso_dir"/isolinux/
fi

}

# Let iso/, vmlinuz and initrd.img get copied, even if work_dir was saved,
# in case they have changed, unless $nocopy = yes.
copy_kernel () {
rsync -a "$iso_dir"/ "$work_dir"/iso/
cp "$kernel_image" "$work_dir"/iso/live/
cp "$initrd_image" "$work_dir"/iso/live/
}


# Copy the filesystem
copy_filesystem () {
if [[ $limit_cpu = "yes" ]] ; then
	[[ $(type -p cpulimit) ]] || \
	while true ; do
		echo -n "
 The cpulimit program is not installed. Your CPU will not be limited.
 Would you like to continue anyway? (y/N) 
 "
    read ans
    case $ans in
      [Yy]*) break ;;
      *) exit 0 ;;
    esac
done
	cpulimit -e rsync -l "$limit" &
	pid="$!"
fi
rsync -av / myfs/ ${rsync_option1} ${rsync_option2} ${rsync_option3} \
	--exclude="$work_dir" --exclude="$snapshot_dir" --exclude-from="$snapshot_excludes"
if [[ -n "$pid" ]] ; then
	kill "$pid"
fi 
}

if [ "$nocopy" != "yes" ]; then
	copy_isolinux
	copy_kernel
	copy_filesystem
fi


# Truncate logs, remove archived logs.
find myfs/var/log -name "*gz" -print0 | xargs -0r rm -f
find myfs/var/log/ -type f -exec truncate -s 0 {} \;

# Allow all fixed drives to be mounted with pmount
if [[ $pmount_fixed = "yes" ]] ; then
	if [[ -f "$work_dir"/myfs/etc/pmount.allow ]]; then
		sed -i 's:#/dev/sd\[a-z\]:/dev/sd\[a-z\]:' "$work_dir"/myfs/etc/pmount.allow
	fi
fi

# Disable freshclam for the live-CD
if [[ $disable_freshclam = "yes" ]] ; then
	for link in "$work_dir"/myfs/etc/rc*.d/*clamav-freshclam ; do
		if [[ -h "$link" ]] ; then
			rm $link
		fi
	done
fi

# Clear list of recently used files in geany for primary user.
if [[ $clear_geany = "yes" ]] ; then
	sed -i 's/recent_files=.*;/recent_files=/' "$work_dir"/myfs/home/"$username"/.config/geany/geany.conf
fi

# Enable or disable password login through ssh for users (not root)

# Remove obsolete live-config file
if [[ -e "$work_dir"/myfs/lib/live/config/1161-openssh-server ]] ; then
	rm -f "$work_dir"/myfs/lib/live/config/1161-openssh-server
fi

sed -i 's/PermitRootLogin yes/PermitRootLogin without-password/' "$work_dir"/myfs/etc/ssh/sshd_config

if [[ $ssh_pass = "yes" ]] ; then
	sed -i 's|.*PasswordAuthentication.*no|PasswordAuthentication yes|' "$work_dir"/myfs/etc/ssh/sshd_config
	sed -i 's|#.*PasswordAuthentication.*yes|PasswordAuthentication yes|' "$work_dir"/myfs/etc/ssh/sshd_config
elif [[ $ssh_pass = "no" ]] ; then
	sed -i 's|.*PasswordAuthentication.*yes|PasswordAuthentication no|' "$work_dir"/myfs/etc/ssh/sshd_config
fi

# /etc/fstab should exist, even if it's empty,
# to prevent error messages at boot
touch "$work_dir"/myfs/etc/fstab

# Blank out systemd machine id. If it does not exist, systemd-journald
# will fail, but if it exists and is empty, systemd will automatically
# set up a new unique ID.

if [ -e "$work_dir"/myfs/etc/machine-id ]
then
	rm -f "$work_dir"/myfs/etc/machine-id
	: > "$work_dir"/myfs/etc/machine-id
fi

# Need to define $filename here (moved up from genisoimage)
# and use it as directory name to identify the build on the cdrom.
# and put package list inside that directory
if [[ $stamp = "datetime" ]]; then
    # use this variable so iso and md5 have same time stamp
	filename="$snapshot_basename"-$(date +%Y%m%d_%H%M).iso
else
    n=1
    while [[ -f "$snapshot_dir"/snapshot$n.iso ]]; do
        ((n++))
    done
    filename="$snapshot_basename"$n.iso
fi

# Prepend the dir name with a constant,
# so you can find and delete the old ones.
#
dir_prefix="pkglist"

for dir in "$work_dir"/iso/"$dir_prefix"* ; do
	rm -r "$dir"
done
mkdir -p "$work_dir"/iso/"${dir_prefix}_${filename%.iso}"
dpkg -l | egrep "ii|hi" | awk '{ print $2 }' > "$work_dir"/iso/"${dir_prefix}_${filename%.iso}"/package_list

# Add the Release Notes to the iso
if [[ -f /usr/share/doc/_Release_Notes/Release_Notes ]] ; then
	rsync -a /usr/share/doc/_Release_Notes/Release_Notes "$work_dir"/iso/
fi


# Create the boot menu unless iso_dir or boot_menu is not default.
if [[ -n "$DISTRO" ]] ; then
	live_config_version=$(dpkg -l live-config | awk '/live-config/ { print $3 }' | cut -d. -f1)
	if [[ $live_config_version -gt 3 ]] ; then
		CONFIGS="components"
	else
		CONFIGS="config"
	fi

	sed -i "s:\${DISTRO}:$DISTRO:g" "$work_dir"/iso/isolinux/"$boot_menu"
	sed -i "s:\${netconfig_opt}:$netconfig_opt:g" "$work_dir"/iso/isolinux/"$boot_menu"
#	sed -i "s:\${DISTRO}:$DISTRO:g" "$work_dir"/iso/isolinux/menu.cfg
#	sed -i "s:\${DISTRO}:$DISTRO:g" "$work_dir"/iso/boot/grub/"$grub_menu"
#	sed -i "s:\${CONFIGS}:$CONFIGS:g" "$work_dir"/iso/isolinux/"$boot_menu"
fi


# Clear configs from /etc/network/interfaces, wicd and NetworkManager
# so they aren't stealthily included in the snapshot.
if [[ -z $netconfig_opt ]] ; then
	echo "# The loopback network interface
auto lo
iface lo inet loopback
" > "$work_dir"/myfs/etc/network/interfaces
	rm -f "$work_dir"/myfs/var/lib/wicd/configurations/*
	rm -f "$work_dir"/myfs/etc/NetworkManager/system-connections
fi


# Pause to edit the boot menu or anything else in $work_dir
if [[ $edit_boot_menu = "yes" ]]; then
	echo "
 You may now go to another virtual console to edit any files in the work
 directory, or hit ENTER and edit the boot menu.
 "
 read -p " "
 "$text_editor" "$work_dir"/iso/isolinux/"$boot_menu"
# "$text_editor" "$work_dir"/iso/boot/grub/"$grub_menu"
fi


# Squash the filesystem copy
echo "Squashing the filesystem..."
if [[ $limit_cpu = "yes" ]] ; then
	[[ $(type -p cpulimit) ]] || \
	while true ; do
		echo -n "
 The cpulimit program is not installed. Your CPU will not be limited.
 Would you like to continue anyway? (y/N) 
 "
    read ans
    case $ans in
      [Yy]*) break ;;
      *) exit 0 ;;
    esac
done
	cpulimit -e mksquashfs -l "$limit" &
	pid="$!"
fi
mksquashfs myfs/ iso/live/filesystem.squashfs ${mksq_opt}
if [[ -n "$pid" ]] ; then
	kill "$pid"
fi 


# This code is redundant, because $work_dir gets removed later, but
# it might help by making more space on the hard drive for the iso.
if [[ $save_work = "no" ]]; then
    rm -rf myfs
fi


# create the iso file, make it isohybrid
# create md5sum file for the iso
echo "Creating CD/DVD image file..."

# If isohdpfx.bin gets moved again, maybe use:   isohdpfx=$(find /usr/lib/ -name isohdpfx.bin)
    if [[ $make_isohybrid = "yes" ]]; then
       if [[ -f /usr/lib/syslinux/mbr/isohdpfx.bin ]] ; then
          isohybrid_opt="-isohybrid-mbr /usr/lib/syslinux/mbr/isohdpfx.bin"
       elif [[ -f /usr/lib/syslinux/isohdpfx.bin ]] ; then
                    isohybrid_opt="-isohybrid-mbr /usr/lib/syslinux/isohdpfx.bin"
       elif [[ -f /usr/lib/ISOLINUX/isohdpfx.bin ]] ; then
          isohybrid_opt="-isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin"
		else
			echo "Can't create isohybrid.  File: isohdpfx.bin not found. The resulting image will be a standard iso file."
		fi
	fi

# Modificado para MiniNo
# Modified for MiniNo
#    xorriso -as mkisofs -r -J -joliet-long -l ${isohybrid_opt} \
#    -partition_offset 16 -V "snapshot-live-cd"  -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot \
#    -boot-load-size 4 -boot-info-table -o "$snapshot_dir"/"$filename" iso/
 
    xorriso -as mkisofs -r -J -joliet-long -l ${isohybrid_opt} \
    -partition_offset 16 -V "minino-live"  -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot \
    -boot-load-size 4 -boot-info-table -o "$snapshot_dir"/"$filename" iso/ 

	if [[ $make_md5sum = "yes" ]]; then
		cd "$snapshot_dir"
		md5sum "$filename" > "$filename".md5
		cd "$work_dir"
	fi

# Cleanup
if [[ $save_work = "no" ]]; then
    echo "Cleaning..."
    cd /
    rm -rf "$work_dir"
else
    rm "$work_dir"/iso/live/filesystem.squashfs
fi

echo "All finished! "

exit 0
